definitions:
  cart.addDTO:
    properties:
      product_id:
        example: 1
        type: integer
      quantity:
        example: 2
        type: integer
    type: object
  cart.quantityDTO:
    properties:
      product_id:
        example: 1
        type: integer
      quantity:
        example: 4
        type: integer
    type: object
  entity.Cart:
    properties:
      createdAt:
        type: string
      id:
        example: 1
        type: integer
      items:
        items:
          $ref: '#/definitions/entity.CartItem'
        type: array
      totalQuantity:
        type: integer
      updatedAt:
        type: string
      userID:
        type: integer
    type: object
  entity.CartItem:
    properties:
      cart_id:
        example: 1
        type: integer
      created_at:
        example: "2025-05-05 10:30:00"
        type: string
      id:
        example: 1
        type: integer
      product_id:
        example: 1
        type: integer
      quantity:
        example: 1
        type: integer
    type: object
  entity.Order:
    properties:
      completedAt:
        type: string
      cost:
        type: number
      createdAt:
        type: string
      id:
        example: 1
        type: integer
      items:
        items:
          $ref: '#/definitions/entity.OrderItem'
        type: array
      itemsQuantity:
        type: integer
      rawCost:
        type: number
      status:
        type: string
      userID:
        type: integer
    type: object
  entity.OrderItem:
    properties:
      cost:
        type: number
      id:
        example: 1
        type: integer
      orderID:
        type: integer
      productID:
        type: integer
      quantity:
        type: integer
      rawCost:
        type: number
    type: object
  entity.OrderStatus:
    enum:
    - created
    - in_progress
    - cancelled
    - completed
    type: string
    x-enum-varnames:
    - CREATED
    - IN_PROGRESS
    - CANCELED
    - COMPLETED
  order.statusDTO:
    properties:
      order_id:
        example: 1
        type: integer
      status:
        allOf:
        - $ref: '#/definitions/entity.OrderStatus'
        example: completed
    type: object
host: localhost:8080
info:
  contact: {}
  description: API for managing user carts and orders.
  title: Cart API
  version: "1.0"
paths:
  /cart:
    get:
      description: Возвращает корзину пользователя со списком товаров
      parameters:
      - description: страница пагинации
        example: 1
        in: query
        name: page
        type: integer
      - description: лимит пагинации
        example: 10
        in: query
        name: limit
        type: integer
      - description: id пользователя
        example: 1
        in: query
        name: user_id
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entity.Cart'
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Получить корзину пользователя
      tags:
      - cart
    patch:
      consumes:
      - application/json
      description: Изменяет количество указанного товара в корзине пользователя. Не
        добавляет товар, если его нет в корзине
      parameters:
      - description: id пользователя
        example: 1
        in: query
        name: user_id
        type: integer
      - description: ID товара и новое количество
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/cart.quantityDTO'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Изменить количество товара в корзине
      tags:
      - cart
    post:
      consumes:
      - application/json
      description: Добавляет товар с указанным id и количеством в корзину пользователя
        и возвращает обновленную корзину. В случае, если в корзине уже есть товар
        с данным id - увеличит количество товара в корзине на указанное число.
      parameters:
      - description: id пользователя
        example: 1
        in: query
        name: user_id
        type: integer
      - description: Данные о товаре
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/cart.addDTO'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/entity.Cart'
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Добавить товар в корзину
      tags:
      - cart
  /cart/{product_id}:
    delete:
      description: Удаляет товар с указанным ID из корзины пользователя
      parameters:
      - description: id пользователя
        example: 1
        in: query
        name: user_id
        type: integer
      - description: ID товара
        in: path
        name: product_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entity.Cart'
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Удалить товар из корзины
      tags:
      - cart
  /order:
    get:
      description: Возвращает список всех заказов пользователя
      parameters:
      - description: id пользователя
        example: 1
        in: query
        name: user_id
        type: integer
      - description: сортировка по статуса
        example: completed
        in: query
        name: status
        type: string
      - description: страница пагинации
        example: 1
        in: query
        name: page
        type: integer
      - description: лимит пагинации
        example: 10
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/entity.Order'
            type: array
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Получить заказы пользователя
      tags:
      - order
    post:
      description: Создает новый заказ основываясь на содержимом корзины
      parameters:
      - description: id пользователя
        in: query
        name: user_id
        type: integer
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/entity.Order'
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Создать заказ
      tags:
      - order
  /order/{orderID}:
    get:
      description: Возвращает заказ с указанным ID
      parameters:
      - description: id пользователя
        example: 1
        in: query
        name: user_id
        type: integer
      - description: ID заказа
        in: path
        name: orderID
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entity.Order'
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Получить заказ по ID
      tags:
      - order
  /order/status:
    patch:
      consumes:
      - application/json
      description: Изменяет статус указанного заказа
      parameters:
      - description: id пользователя
        example: 1
        in: query
        name: user_id
        type: integer
      - description: ID заказа и новый статус
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/order.statusDTO'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entity.Order'
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Изменить статус заказа
      tags:
      - order
swagger: "2.0"
